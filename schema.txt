generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  firstName    String?
  lastName     String?
  avatar       String?
  role         String   @default("EMPLOYEE")
  partnerId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  partnerCode  String?  @unique
  partner      User?    @relation("UserPartner", fields: [partnerId], references: [id])
  subordinates User[]   @relation("UserPartner")
}

model Page {
  id          String           @id @default(cuid())
  title       String
  path        String           @unique
  description String?
  content     String?          @default("")
  isActive    Boolean          @default(true)
  order       Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
}

model MenuItem {
  id          String                 @id @default(cuid())
  title       String
  icon        String?                @default("")
  path        String                 @unique
  description String?
  type        String                 @default("horizontal")
  isActive    Boolean                @default(true)
  order       Int                    @default(0)
  parentId    String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  accesses    AccessRolePageAccess[]
  parent      MenuItem?              @relation("MenuHierarchy", fields: [parentId], references: [id])
  children    MenuItem[]             @relation("MenuHierarchy")
}

model Role {
  id       String                 @id @default(cuid())
  name     String                 @unique
  accesses AccessRolePageAccess[]
}

model AccessRolePageAccess {
  id         String   @id @default(cuid())
  roleId     String
  menuItemId String
  canAccess  Boolean  @default(false)
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])

  @@unique([roleId, menuItemId])
}

model RolePermission {
  id        String   @id @default(cuid())
  role      String
  pageId    String
  canAccess Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([role, pageId])
}
